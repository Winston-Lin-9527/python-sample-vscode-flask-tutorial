trigger:
  branches:
    include:
    - main

variables:
  # Azure Resource Manager connection created during pipeline creation
  # azureServiceConnectionId: 'a2455739-81e9-484b-ad63-893abbf8c493'
  azureServiceConnectionId: '98330fb8-d61b-40e3-a03a-26dd6cf31323'

  # Web app name
  # webAppName: 'devops-demo-app'
  webAppName: 'python-flask-webapp'

  # Agent VM image name
  # vmImageName: 'ubuntu-latest'
  
  # poolName: 'Default' # self hosted agents
  # # Agent VM image name
  # vmImageName: 'arm-vm'
  vmImageName: 'ubuntu-latest'

  # Environment name
  # environmentName: 'devops-demo-app'
  environmentName: 'python-flask-webapp'

  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)

  pythonVersion: '3.11'

  # Version numbering 
  majorVersion: 1
  minorVersion: 2
  # automatically increment starting from 0 for each unique 'majorMinor' value
  patch: $[counter(variables['majorMinor'], 0)]

  name: why
  ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
    value: pr
  ${{ elseif eq(variables['Build.Reason'], 'Manual' ) }}:
    value: manual
  ${{ elseif eq(variables['Build.Reason'], 'IndividualCI' ) }}:
    value: indivci
  ${{ else }}:
    value: other

name: $(TeamProject)_$(majorVersion).$(minorVersion).$(patch)_$(SourceBranchName)_$(why)_$(Date:yyyyMMdd)


stages:
- stage: Build_Test
  displayName: Build & Test stage
  jobs:
  - job: BuildNTestJob
    pool:
      # name: $(poolName)
      vmImage: $(vmImageName)
    steps:
    - script: |
        echo "##vso[build.updatebuildnumber]$(Build.BuildNumber)"
        echo "##vso$(majorVersion).$(minorVersion).$(patch)"
      displayName: 'Build with version number'
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
        # architecture: x86
      displayName: 'Use Python $(pythonVersion)'
    # - script: |
    #     python -m venv antenv
    #     source antenv/bin/activate
    #     python -m pip install --upgrade pip
    #     pip install setup
    #     pip install -r requirements.txt
    #   workingDirectory: $(projectRoot)
    #   displayName: "Install requirements"
    
    # - script: |
    #     # echo "Running unit tests..."
    #     python -m coverage run --source=src -m pytest -v tests && coverage report -m
    #   displayName: 'Run unit tests'

    - script: |
        python -m venv antenv
        source antenv/bin/activate
        python -m pip install --upgrade pip
        pip install pytest pytest-azurepipelines
        pip install setup
        pip install -r requirements.txt
      displayName: 'Install dependencies'
    - script: |
        source antenv/bin/activate
        python -m pytest tests/
      displayName: 'pytest'
    - script: |
        source antenv/bin/activate
        python -m coverage run --source=src -m pytest -v tests && coverage report -m
      displayName: 'coverage pytest'


# - stage: Test
#   displayName: 'Test Stage'
#   dependsOn: Build
#   condition: succeeded()
#   isSkippable: false
#   jobs:
#   - job: TestJob
#     displayName: 'Test Job'
#     steps:
#     - script: |
#         echo "Running unit tests..."
#         coverage run --source=src -m pytest -v tests && coverage report -m
#       displayName: 'Run unit tests'

- stage: Archive
  displayName: Archive stage
  dependsOn: Build_Test
  condition: succeeded()
  jobs:
  - job: ArchiveJob
    pool:
      # name: $(poolName)
      vmImage: $(vmImageName)
    steps:
    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(projectRoot)'
        includeRootFolder: false
        archiveType: zip      # # we only use Build.BuildID internally as an unique identifer 
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip

        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      displayName: 'Upload package'
      artifact: drop

- stage: Deploy
  displayName: 'Deploy Web App'
  dependsOn: Archive
  condition: succeeded()
  jobs:
  - deployment: DeploymentJob
    pool:
      # name: $(poolName)
      vmImage: $(vmImageName)
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:

          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
            displayName: 'Use Python version'

          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App : $(webAppName)'
            inputs:
              azureSubscription: $(azureServiceConnectionId)
              appName: $(webAppName)
              package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
              startUpCommand: 'startup.txt'